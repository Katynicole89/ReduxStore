{"version":3,"sources":["utils/helpers.js","utils/actions.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","utils/reducers.js","redux/store.js","pages/Success.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js","assets/spinner.gif"],"names":["idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","ProductItem","item","state","useSelector","dispatch","useDispatch","cart","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","product","QUERY_PRODUCTS","gql","QUERY_CHECKOUT","QUERY_CATEGORIES","QUERY_USER","ProductList","currentCategory","useQuery","loading","data","products","useEffect","forEach","then","length","filter","category","map","key","spinner","CategoryMenu","categories","categoryData","id","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","cartOpen","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","defaultState","reducer","action","newState","createStore","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","client","ApolloClient","operation","setContext","headers","authorization","uri","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.dbbb628e.chunk.js","sourcesContent":["export function pluralize(name, count) {\r\n  if (count === 1) {\r\n    return name;\r\n  }\r\n  return name + 's';\r\n}\r\n\r\nexport function idbPromise(storeName, method, object) {\r\n  return new Promise((resolve, reject) => {\r\n    const request = window.indexedDB.open('shop-shop', 1);\r\n    let db, tx, store;\r\n    request.onupgradeneeded = function(e) {\r\n      const db = request.result;\r\n      db.createObjectStore('products', { keyPath: '_id' });\r\n      db.createObjectStore('categories', { keyPath: '_id' });\r\n      db.createObjectStore('cart', { keyPath: '_id' });\r\n    };\r\n\r\n    request.onerror = function(e) {\r\n      console.log('There was an error');\r\n    };\r\n\r\n    request.onsuccess = function(e) {\r\n      db = request.result;\r\n      tx = db.transaction(storeName, 'readwrite');\r\n      store = tx.objectStore(storeName);\r\n\r\n      db.onerror = function(e) {\r\n        console.log('error', e);\r\n      };\r\n\r\n      switch (method) {\r\n        case 'put':\r\n          store.put(object);\r\n          resolve(object);\r\n          break;\r\n        case 'get':\r\n          const all = store.getAll();\r\n          all.onsuccess = function() {\r\n            resolve(all.result);\r\n          };\r\n          break;\r\n        case 'delete':\r\n          store.delete(object._id);\r\n          break;\r\n        default:\r\n          console.log('No valid method');\r\n          break;\r\n      }\r\n\r\n      tx.oncomplete = function() {\r\n        db.close();\r\n      };\r\n    };\r\n  });\r\n}\r\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\r\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\r\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\r\n\r\nexport const ADD_TO_CART = 'ADD_TO_CART';\r\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\r\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\r\nexport const CLEAR_CART = 'CLEAR_CART';\r\nexport const TOGGLE_CART = 'TOGGLE_CART';","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { pluralize } from \"../../utils/helpers\"\r\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\nfunction ProductItem(item) {\r\n\r\n  const state = useSelector((state) => {\r\n    return state\r\n  });\r\n  const dispatch = useDispatch();\r\n\r\n  const { cart } = state;\r\n\r\n\r\n  const addToCart = () => {\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\r\n    if (itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: _id,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n      idbPromise('cart', 'put', {\r\n        ...itemInCart,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        product: { ...item, purchaseQuantity: 1 }\r\n      });\r\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\r\n    }\r\n  }\r\n\r\n\r\n\r\n  const {\r\n    image,\r\n    name,\r\n    _id,\r\n    price,\r\n    quantity\r\n  } = item;\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"card px-1 py-1\">\r\n      <Link to={`/products/${_id}`}>\r\n        <img\r\n          alt={name}\r\n          src={`/images/${image}`}\r\n        />\r\n        <p>{name}</p>\r\n      </Link>\r\n      <div>\r\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\r\n        <span>${price}</span>\r\n      </div>\r\n      <button onClick={addToCart}>Add to cart</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductItem;","import gql from 'graphql-tag';\r\n\r\nexport const QUERY_PRODUCTS = gql`\r\n  query getProducts($category: ID) {\r\n    products(category: $category) {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      image\r\n      category {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CHECKOUT = gql`\r\n  query getCheckout($products: [ID]!) {\r\n    checkout(products: $products) {\r\n      session\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_ALL_PRODUCTS = gql`\r\n  {\r\n    products {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      category {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CATEGORIES = gql`\r\n{\r\n  categories {\r\n    _id\r\n    name\r\n  }\r\n}\r\n`;\r\n\r\nexport const QUERY_USER = gql`\r\n{\r\n  user {\r\n    firstName\r\n    lastName\r\n    orders {\r\n      _id\r\n      purchaseDate\r\n      products {\r\n        _id\r\n        name\r\n        description\r\n        price\r\n        quantity\r\n        image\r\n      }\r\n    }\r\n  }\r\n}\r\n`;","import React, { useEffect } from \"react\";\r\nimport ProductItem from \"../ProductItem\";\r\nimport { UPDATE_PRODUCTS } from \"../../utils/actions\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport spinner from \"../../assets/spinner.gif\"\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nfunction ProductList() {\r\n\r\n\r\n  const state = useSelector((state) => {\r\n    return state\r\n  });\r\n  const dispatch = useDispatch();\r\n\r\n  const { currentCategory } = state;\r\n  \r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n  const products = data?.products || [];\r\n  \r\n  useEffect(() => {\r\n    //if there is data to be stored\r\n    if (data) {\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products\r\n      });\r\n      // but let's also take each product and save it to IndexedDB using the helper function\r\n      data.products.forEach((product) => {\r\n        idbPromise('products', 'put', product)\r\n      });\r\n\r\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\r\n  \r\n    } else if (!loading) {\r\n      //since we are offline, get all if the data from the products store\r\n\r\n      idbPromise('products', 'get').then((products) => {\r\n        //use retrieved data to set global state for offline browsing\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: products\r\n        })\r\n      })\r\n    }\r\n  }, [data, loading, dispatch]);\r\n\r\n  \r\n  function filterProducts() {\r\n    if (!currentCategory) {\r\n      return state.products;\r\n    }\r\n  \r\n    return state.products.filter(product => product.category._id === currentCategory);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"my-2\">\r\n      <h2>Our Products:</h2>\r\n      {products.length ? (\r\n        <div className=\"flex-row\">\r\n            {filterProducts().map(product => (\r\n                <ProductItem\r\n                  key= {product._id}\r\n                  _id={product._id}\r\n                  image={product.image}\r\n                  name={product.name}\r\n                  price={product.price}\r\n                  quantity={product.quantity}\r\n                />\r\n            ))}\r\n        </div>\r\n      ) : (\r\n        <h3>You haven't added any products yet!</h3>\r\n      )}\r\n      { loading ? \r\n      <img src={spinner} alt=\"loading\" />: null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductList;","import React, { useEffect } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\r\nimport { QUERY_CATEGORIES } from '../../utils/queries';\r\nimport { idbPromise } from '../../utils/helpers';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nfunction CategoryMenu() {\r\n\r\n  const state = useSelector((state) => {\r\n    return state\r\n  });\r\n  const dispatch = useDispatch();\r\n\r\n  const { categories } = state;\r\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\r\n\r\n\r\n  useEffect(() => {\r\n    //if categoryData exists or has changed from the response of useQuery, then run dispatch()\r\n\r\n    if(categoryData) {\r\n      //execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\r\n      dispatch({\r\n        type: UPDATE_CATEGORIES,\r\n        categories: categoryData.categories\r\n      });\r\n\r\n      categoryData.categories.forEach(category => {\r\n        idbPromise('categories', 'put', category)\r\n      }) \r\n    } else if (!loading) {\r\n      idbPromise('categories', 'get').then(categories => {\r\n        dispatch({\r\n          type: UPDATE_CATEGORIES,\r\n          categories: categories\r\n        })\r\n      })\r\n    }\r\n  }, [categoryData, loading, dispatch]);\r\n\r\n\r\n  const handleClick = id => {\r\n    dispatch({\r\n      type: UPDATE_CURRENT_CATEGORY,\r\n      currentCategory: id\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Choose a Category:</h2>\r\n      {categories.map(item => (\r\n        <button\r\n          key={item._id}\r\n          onClick={() => {\r\n            handleClick(item._id);\r\n          }}\r\n        >\r\n          {item.name}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoryMenu;","import React from 'react';\r\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst CartItem = ({ item }) => {\r\n\r\n  const state = useSelector((state) => {\r\n    return state\r\n  });\r\n  const dispatch = useDispatch();\r\n\r\n    const removeFromCart = item => {\r\n        dispatch({\r\n          type: REMOVE_FROM_CART,\r\n          _id: item._id\r\n        });\r\n        idbPromise('cart', 'delete', { ...item });\r\n      };\r\n\r\n\r\n    const onChange = (e) => {\r\n        const value = e.target.value;\r\n      \r\n        if (value === '0') {\r\n          dispatch({\r\n            type: REMOVE_FROM_CART,\r\n            _id: item._id\r\n          });\r\n\r\n          idbPromise('cart', 'delete', {...item})\r\n        } else {\r\n          dispatch({\r\n            type: UPDATE_CART_QUANTITY,\r\n            _id: item._id,\r\n            purchaseQuantity: parseInt(value)\r\n          });\r\n\r\n          idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value)})\r\n        }\r\n      };\r\n\r\n\r\n  return (\r\n    <div className=\"flex-row\">\r\n      <div>\r\n        <img\r\n          src={`/images/${item.image}`}\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <div>{item.name}, ${item.price}</div>\r\n        <div>\r\n          <span>Qty:</span>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"1\"\r\n            value={item.purchaseQuantity}\r\n            onChange={onChange}\r\n          />\r\n            <span\r\n            role=\"img\"\r\n            aria-label=\"trash\"\r\n            onClick={() => removeFromCart(item)}\r\n            >\r\n            🗑️\r\n            </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CartItem;","import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token);\r\n  }\r\n\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React, { useEffect } from 'react';\r\nimport CartItem from '../CartItem';\r\nimport Auth from '../../utils/auth';\r\nimport './style.css';\r\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\r\nimport { idbPromise } from '../../utils/helpers';\r\nimport { QUERY_CHECKOUT } from '../../utils/queries';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { useLazyQuery } from '@apollo/react-hooks';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\r\n\r\nconst Cart = () => {\r\n\r\n    const state = useSelector((state) => {\r\n      return state\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [getCheckout, {data}] = useLazyQuery(QUERY_CHECKOUT);\r\n\r\n    useEffect(() => {\r\n        async function getCart() {\r\n            const cart = await idbPromise('cart', 'get');\r\n            dispatch({\r\n                type: ADD_MULTIPLE_TO_CART,\r\n                products: [...cart]\r\n            })\r\n        };\r\n\r\n        if(!state.cart.length) {\r\n            getCart();\r\n        }\r\n    }, [state.cart.length, dispatch]);\r\n\r\n\r\n\r\n    function toggleCart() {\r\n        dispatch({type: TOGGLE_CART});\r\n    }\r\n\r\n    function calculateTotal() {\r\n        let sum = 0;\r\n        state.cart.forEach(item => {\r\n            sum+= item.price * item.purchaseQuantity;\r\n        })\r\n\r\n        return sum.toFixed(2);\r\n    }\r\n\r\n\r\n    function submitCheckout() {\r\n        const productIds = [];\r\n\r\n        state.cart.forEach((item) => {\r\n            for (let i=0; i<item.purchaseQuantity; i++) {\r\n                productIds.push(item._id);\r\n            }\r\n        })\r\n\r\n        getCheckout({\r\n            variables: {products: productIds}\r\n        })\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if(data) {\r\n            stripePromise.then((res) => {\r\n                res.redirectToCheckout({ sessionId: data.checkout.session})\r\n            })\r\n        }\r\n    }, [data])\r\n    \r\n\r\n    if(!state.cartOpen) {\r\n        return (\r\n            <div className=\"cart-closed\" onClick={toggleCart}>\r\n              <span\r\n                role=\"img\"\r\n                aria-label=\"trash\">🛒</span>\r\n            </div>\r\n          );\r\n    }\r\n\r\n    console.log(state);\r\n\r\n\r\n  return (\r\n    // <div className=\"cart\">\r\n    //   <div className=\"close\" onClick={toggleCart}>[close]</div>\r\n    //   <h2>Shopping Cart</h2>\r\n    //   <div>\r\n    //       <CartItem item={{name:'Camera', image:'camera.jpg', price:5, purchaseQuantity:3}} />\r\n    //       <CartItem item={{name:'Soap', image:'soap.jpg', price:6, purchaseQuantity:4}} />\r\n\r\n    //       <div className=\"flex-row space-between\">\r\n    //         <strong>Total: $0</strong>\r\n    //         {\r\n    //           Auth.loggedIn() ?\r\n    //             <button>\r\n    //               Checkout\r\n    //             </button>\r\n    //             :\r\n    //             <span>(log in to check out)</span>\r\n    //         }\r\n    //       </div>\r\n    //     </div>\r\n    // </div>\r\n    <div className=\"cart\">\r\n  <div className=\"close\" onClick={toggleCart}>[close]</div>\r\n  <h2>Shopping Cart</h2>\r\n  {state.cart.length ? (\r\n    <div>\r\n      {state.cart.map(item => (\r\n        <CartItem key={item._id} item={item} />\r\n      ))}\r\n      <div className=\"flex-row space-between\">\r\n        <strong>Total: ${calculateTotal()}</strong>\r\n        {\r\n          Auth.loggedIn() ?\r\n            <button onClick={submitCheckout}>\r\n              Checkout\r\n            </button>\r\n            :\r\n            <span>(log in to check out)</span>\r\n        }\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <h3>\r\n      <span role=\"img\" aria-label=\"shocked\">\r\n        😱\r\n      </span>\r\n      You haven't added anything to your cart yet!\r\n    </h3>\r\n  )}\r\n</div>\r\n  );\r\n};\r\n\r\nexport default Cart;","import React from \"react\";\r\nimport ProductList from \"../components/ProductList\";\r\nimport CategoryMenu from \"../components/CategoryMenu\";\r\nimport Cart from \"../components/Cart\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <CategoryMenu />\r\n      <ProductList />\r\n      <Cart />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\r\nimport spinner from '../assets/spinner.gif'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Cart from '../components/Cart';\r\nimport {\r\n  REMOVE_FROM_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  ADD_TO_CART,\r\n  UPDATE_PRODUCTS,\r\n} from '../utils/actions';\r\nimport { idbPromise } from '../utils/helpers';\r\nfunction Detail() {\r\n\r\n\r\n  const state = useSelector((state) => {\r\n    return state\r\n  });\r\n  const dispatch = useDispatch();\r\n\r\n\r\n\r\n  const { id } = useParams();\r\n\r\n  const [currentProduct, setCurrentProduct] = useState({});\r\n\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n  const { products, cart } = state;\r\n\r\n  useEffect(() => {\r\n    // already in global store\r\n    if (products.length) {\r\n      setCurrentProduct(products.find(product => product._id === id));\r\n    } \r\n    // retrieved from server\r\n    else if (data) {\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products\r\n      });\r\n  \r\n      data.products.forEach((product) => {\r\n        idbPromise('products', 'put', product);\r\n      });\r\n    }\r\n    // get cache from idb\r\n    else if (!loading) {\r\n      idbPromise('products', 'get').then((indexedProducts) => {\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: indexedProducts\r\n        });\r\n      });\r\n    }\r\n  }, [products, data, loading, dispatch, id]);\r\n\r\n\r\n\r\n  const addToCart = () => {\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\r\n  \r\n    if (itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: id,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\r\n      idbPromise('cart', 'put', {\r\n        ...itemInCart,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        product: { ...currentProduct, purchaseQuantity: 1 }\r\n      });\r\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\r\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\r\n    }\r\n  }\r\n\r\n\r\n  const removeFromCart = () => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: currentProduct._id\r\n    });\r\n  \r\n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\r\n    idbPromise('cart', 'delete', { ...currentProduct });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {currentProduct ? (\r\n        <div className=\"container my-1\">\r\n          <Link to=\"/\">\r\n            ← Back to Products\r\n          </Link>\r\n\r\n          <h2>{currentProduct.name}</h2>\r\n\r\n          <p>\r\n            {currentProduct.description}\r\n          </p>\r\n\r\n          <p>\r\n            <strong>Price:</strong>\r\n            ${currentProduct.price}\r\n            {\" \"}\r\n            <button onClick={addToCart}>\r\n              Add to cart\r\n            </button>\r\n\r\n            <button \r\n            disabled={!cart.find(p => p._id === currentProduct._id)} \r\n            onClick={removeFromCart}\r\n          >\r\n            Remove from Cart\r\n          </button>\r\n          </p>\r\n\r\n          <img\r\n            src={`/images/${currentProduct.image}`}\r\n            alt={currentProduct.name}\r\n          />\r\n        </div>\r\n      ) : null}\r\n      {\r\n        loading ? <img src={spinner} alt=\"loading\" /> : null\r\n      }\r\n      <Cart />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Detail;","import React from \"react\";\r\n\r\nfunction Jumbotron({ children }) {\r\n  return (\r\n    <div\r\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\n\r\nconst NoMatch = () => {\r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <h1>404 Page Not Found</h1>\r\n        <h1>\r\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\r\n            🙄\r\n          </span>\r\n        </h1>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoMatch;\r\n","import gql from 'graphql-tag';\r\n\r\nexport const LOGIN = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const ADD_ORDER = gql`\r\n  mutation addOrder($products: [ID]!) {\r\n    addOrder(products: $products) {\r\n      purchaseDate\r\n      products {\r\n        _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      category {\r\n        name\r\n      } \r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\r\n    addUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;","import React, { useState } from \"react\";\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { Link } from \"react-router-dom\";\r\nimport { LOGIN } from \"../utils/mutations\"\r\nimport Auth from \"../utils/auth\";\r\n\r\nfunction Login(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' })\r\n  const [login, { error }] = useMutation(LOGIN);\r\n\r\n  const handleFormSubmit = async event => {\r\n    event.preventDefault();\r\n    try {\r\n      const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\r\n      const token = mutationResponse.data.login.token;\r\n      Auth.login(token);\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  };\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n      <Link to=\"/signup\">\r\n        ← Go to Signup\r\n      </Link>\r\n\r\n      <h2>Login</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email address:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        {\r\n          error ? <div>\r\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\r\n          </div> : null\r\n        }\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport Auth from \"../utils/auth\";\r\nimport { ADD_USER } from \"../utils/mutations\";\r\n\r\nfunction Signup(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [addUser] = useMutation(ADD_USER);\r\n\r\n  const handleFormSubmit = async event => {\r\n    event.preventDefault();\r\n    const mutationResponse = await addUser({\r\n      variables: {\r\n        email: formState.email, password: formState.password,\r\n        firstName: formState.firstName, lastName: formState.lastName\r\n      }\r\n    });\r\n    const token = mutationResponse.data.addUser.token;\r\n    Auth.login(token);\r\n  };\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n      <Link to=\"/login\">\r\n        ← Go to Login\r\n      </Link>\r\n\r\n      <h2>Signup</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"firstName\">First Name:</label>\r\n          <input\r\n            placeholder=\"First\"\r\n            name=\"firstName\"\r\n            type=\"firstName\"\r\n            id=\"firstName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"lastName\">Last Name:</label>\r\n          <input\r\n            placeholder=\"Last\"\r\n            name=\"lastName\"\r\n            type=\"lastName\"\r\n            id=\"lastName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default Signup;\r\n","import React from \"react\";\r\nimport Auth from \"../../utils/auth\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Nav() {\r\n\r\n  function showNavigation() {\r\n    if (Auth.loggedIn()) {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/orderHistory\">\r\n              Order History\r\n            </Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\r\n            <a href=\"/\" onClick={() => Auth.logout()}>\r\n              Logout\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      );\r\n    } else {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/signup\">\r\n              Signup\r\n            </Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/login\">\r\n              Login\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <header className=\"flex-row px-1\">\r\n      <h1>\r\n        <Link to=\"/\">\r\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\r\n          -Shop-Shop\r\n        </Link>\r\n      </h1>\r\n\r\n      <nav>\r\n        {showNavigation()}\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import {\r\n    UPDATE_PRODUCTS,\r\n    UPDATE_CATEGORIES,\r\n    UPDATE_CURRENT_CATEGORY,\r\n    ADD_TO_CART,\r\n    ADD_MULTIPLE_TO_CART,\r\n    REMOVE_FROM_CART,\r\n    UPDATE_CART_QUANTITY,\r\n    CLEAR_CART,\r\n    TOGGLE_CART\r\n  } from './actions';\r\n\r\n\r\nconst defaultState = {\r\n    products: [],\r\n    cart: [],\r\n    cartOpen: false,\r\n    categories: [],\r\n    currentCategory: '',\r\n}\r\n\r\n\r\n\r\nconst reducer = (state=defaultState, action) => {\r\n    switch (action.type) {\r\n        //if action type value is the value of 'UPDATE_PRODUCTS', return a new state object with an updated products array \r\n        case UPDATE_PRODUCTS:\r\n            return {\r\n                ...state,\r\n                products: [...action.products]\r\n            };\r\n\r\n            //if action type value is value of 'UPDATE_CATEGORIES', return a new state object with an updated categories array\r\n        case UPDATE_CATEGORIES:\r\n            return {\r\n                ...state,\r\n                categories: [...action.categories]\r\n            };\r\n        \r\n        case UPDATE_CURRENT_CATEGORY: \r\n            return {\r\n                ...state,\r\n                currentCategory: action.currentCategory\r\n            };\r\n\r\n        case ADD_TO_CART: \r\n            return {\r\n                ...state,\r\n                cartOpen: true,\r\n                cart: [...state.cart, action.product]\r\n            };\r\n\r\n        case ADD_MULTIPLE_TO_CART:\r\n            return {\r\n                ...state,\r\n                cart: [...state.cart, ...action.products]\r\n            };\r\n\r\n        case REMOVE_FROM_CART:\r\n            let newState = state.cart.filter(product => {\r\n                return product._id !== action._id;\r\n            });\r\n            \r\n            return {\r\n                ...state,\r\n                cartOpen: newState.length > 0,\r\n                cart: newState\r\n            };\r\n\r\n        case UPDATE_CART_QUANTITY: \r\n            return {\r\n                ...state,\r\n                cartOpen: true,\r\n                cart: state.cart.map(product => {\r\n                    if(action._id === product._id) {\r\n                        product.purchaseQuantity = action.purchaseQuantity;\r\n                    }\r\n\r\n                    return product;\r\n                })\r\n            };\r\n\r\n        case CLEAR_CART:\r\n            return {\r\n                ...state,\r\n                cartOpen: false,\r\n                cart: []\r\n            };\r\n\r\n\r\n        case TOGGLE_CART:\r\n            return {\r\n                ...state,\r\n                cartOpen: !state.cartOpen\r\n            }\r\n\r\n        \r\n\r\n            //if it's none of these actions, do not update the state at all and keep things the same\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport default reducer;","import { createStore } from 'redux';\r\nimport reducer from '../utils/reducers'\r\n\r\nconst store = createStore(reducer);\r\nexport default store;","import React, { useEffect } from \"react\";\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport { ADD_ORDER } from \"../utils/mutations\";\r\nimport { idbPromise } from \"../utils/helpers\";\r\n\r\nfunction Success() {\r\n  const [addOrder] = useMutation(ADD_ORDER);\r\n\r\n  useEffect(() => {\r\n    async function saveOrder() {\r\n      const cart = await idbPromise('cart', 'get');\r\n      const products = cart.map(item => item._id);\r\n      \r\n      if (products.length) {\r\n        const { data } = await addOrder({ variables: { products } });\r\n        const productData = data.addOrder.products;\r\n    \r\n        productData.forEach((item) => {\r\n          idbPromise('cart', 'delete', item);\r\n        });\r\n      }\r\n        \r\n      setTimeout(() => {\r\n        window.location.assign('/');\r\n      }, 3000);\r\n    }\r\n\r\n    saveOrder();\r\n  }, [addOrder]);\r\n\r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <h1>Success!</h1>\r\n        <h2>\r\n          Thank you for your purchase!\r\n        </h2>\r\n        <h2>\r\n          You will now be redirected to the home page\r\n        </h2>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Success;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { QUERY_USER } from \"../utils/queries\";\r\n\r\nfunction OrderHistory() {\r\n  const { data } = useQuery(QUERY_USER);\r\n  let user;\r\n\r\n  if (data) {\r\n    user = data.user;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container my-1\">\r\n        <Link to=\"/\">\r\n          ← Back to Products\r\n          </Link>\r\n\r\n        {user ? (\r\n          <>\r\n            <h2>Order History for {user.firstName} {user.lastName}</h2>\r\n            {user.orders.map((order) => (\r\n              <div key={order._id} className=\"my-2\">\r\n                <h3>{new Date(parseInt(order.purchaseDate)).toLocaleDateString()}</h3>\r\n                <div className=\"flex-row\">\r\n                  {order.products.map(({ _id, image, name, price }, index) => (\r\n                    <div key={index} className=\"card px-1 py-1\">\r\n                      <Link to={`/products/${_id}`}>\r\n                        <img\r\n                          alt={name}\r\n                          src={`/images/${image}`}\r\n                        />\r\n                        <p>{name}</p>\r\n                      </Link>\r\n                      <div>\r\n                        <span>${price}</span>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </>\r\n        ) : null}\r\n\r\n      </div>\r\n\r\n    </>)\r\n\r\n};\r\n\r\nexport default OrderHistory;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport ApolloClient from 'apollo-boost';\r\n\r\nimport Home from \"./pages/Home\";\r\nimport Detail from \"./pages/Detail\";\r\nimport NoMatch from \"./pages/NoMatch\";\r\nimport Login from \"./pages/Login\";\r\nimport Signup from \"./pages/Signup\";\r\nimport Nav from \"./components/Nav\";\r\n// import { StoreProvider } from \"./utils/GlobalState\";\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nimport Success from \"./pages/Success\";\r\nimport OrderHistory from \"./pages/OrderHistory\";\r\n\r\nconst client = new ApolloClient({\r\n  request: (operation) => {\r\n    const token = localStorage.getItem('id_token')\r\n    operation.setContext({\r\n      headers: {\r\n        authorization: token ? `Bearer ${token}` : ''\r\n      }\r\n    })\r\n  },\r\n  uri: '/graphql',\r\n})\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div>\r\n          {/* <StoreProvider> */}\r\n          <Provider store = {store}>\r\n            <Nav />\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Home} />\r\n              <Route exact path=\"/login\" component={Login} />\r\n              <Route exact path=\"/signup\" component={Signup} />\r\n              <Route exact path=\"/success\" component={Success} />\r\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\r\n              <Route exact path=\"/products/:id\" component={Detail} />\r\n              <Route component={NoMatch} />\r\n            </Switch>\r\n          {/* </StoreProvider> */}\r\n          </Provider>\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (\r\n    process.env.NODE_ENV === 'production' &&\r\n    'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n","module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";"],"sourceRoot":""}